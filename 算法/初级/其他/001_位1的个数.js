/**
 * 编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。

  

 提示：

 请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
 在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。

 */

/**
 * 我们可以直接循环检查给定整数 nn 的二进制位的每一位是否为 11。

 具体代码中，当检查第 ii 位时，我们可以让 nn 与 2^i2
 i
 进行与运算，当且仅当 nn 的第 ii 位为 11 时，运算结果不为 00。

 * @param n
 * @returns {number}
 */
function f1(n) {
    let ret = 0;
    for (let i = 0; i < 32; i++) {
        if ((n & (1 << i)) !== 0) {
            ret++;
        }
    }
    return ret;
}
